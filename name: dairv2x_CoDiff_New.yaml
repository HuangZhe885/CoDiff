name: dairv2x_CoDiff_New
# root_dir: '/mnt/sdd/public/data/common-datasets/V2XSet/train/train'
# validate_dir: '/mnt/sdd/public/data/common-datasets/V2XSet/validate'
# test_dir: '/mnt/sdd/public/data/common-datasets/V2XSet/test'

data_dir: "/mnt/sde/public/data/hz/dair_v2x/cooperative-vehicle-infrastructure"
root_dir: "/mnt/sde/public/data/hz/dair_v2x/cooperative-vehicle-infrastructure/train.json"
validate_dir: "/mnt/sde/public/data/hz/dair_v2x/cooperative-vehicle-infrastructure/val.json"
test_dir: "/mnt/sde/public/data/hz/dair_v2x/cooperative-vehicle-infrastructure/val.json"

yaml_parser: "load_point_pillar_params"
train_params:
  batch_size: &batch_size 1
  # batch_size: &batch_size 4
  epoches: 20
  eval_freq: 2
  save_freq: 2
  max_cav: &max_cav 5

noise_setting:
  add_noise: true
  # async_overhead
  args:
    pos_std: 0.4
    rot_std: 0.4
    pos_mean: 0
    rot_mean: 0

input_source: ['lidar']
label_type: 'lidar'

comm_range: 100

fusion:
  core_method: 'intermediate'
  dataset: 'dairv2x'
  args: 
    proj_first: false

# box_align:
#   train_result: "opencood/logs/coalign_precalc/dairv2x/train/stage1_boxes.json"
#   val_result: "opencood/logs/coalign_precalc/dairv2x/val/stage1_boxes.json"
#   test_result: "opencood/logs/coalign_precalc/dairv2x/test/stage1_boxes.json"
#   args:
#     use_uncertainty: true
#     landmark_SE2: true
#     adaptive_landmark: false
#     normalize_uncertainty: false
#     abandon_hard_cases: true
#     drop_hard_boxes: true

# preprocess-related
preprocess:
  # options: BasePreprocessor, VoxelPreprocessor, BevPreprocessor
  core_method: 'SpVoxelPreprocessor'
  args:
    voxel_size: &voxel_size [0.4, 0.4, 5]
    max_points_per_voxel: 32
    max_voxel_train: 32000
    max_voxel_test: 70000
  # lidar range for each individual cav.
  cav_lidar_range: &cav_lidar [-100.8, -40, -3.5, 100.8, 40, 1.5]

data_augment:
  - NAME: random_world_flip
    ALONG_AXIS_LIST: [ 'x' ]

  - NAME: random_world_rotation
    WORLD_ROT_ANGLE: [ -0.78539816, 0.78539816 ]

  - NAME: random_world_scaling
    WORLD_SCALE_RANGE: [ 0.95, 1.05 ]

# anchor box related
postprocess:
  core_method: 'VoxelPostprocessor' # VoxelPostprocessor, BevPostprocessor supported
  gt_range: *cav_lidar
  anchor_args:
    cav_lidar_range: *cav_lidar
    l: 4.5
    w: 2
    h: 1.56
    r: &anchor_yaw [0, 90]
    feature_stride: 2
    num: &anchor_num 2
  target_args:
    pos_threshold: 0.6
    neg_threshold: 0.45
    score_threshold: 0.20
  order: 'hwl' # hwl or lwh
  max_num: 100 # maximum number of objects in a single frame. use this number to make sure different frames has the same dimension in the same batch
  nms_thresh: 0.15
  dir_args: &dir_args
    dir_offset: 0.7853
    num_bins: 2
    anchor_yaw: *anchor_yaw

# model related
model:
  core_method: point_pillar_baseline_multiscale
  args:  
    train_mode: finetune  # coalign:表示只训练coalign部分,没有diffusion. diffusion:只训练diffusion部分,冻结其他模块. finetune:加入diffusion生成的特征,训练所有模块
    coalign_base: "/home/hz/code/CoAlign/opencood/logs/dairv2x_coalign_with_compression_8_diffusion_hz/net_epoch_bestval_at3.pth" # 训练diffusion时使用的coalign模型
    diffusion_base: "/home/hz/code/CoAlign/opencood/logs/dairv2x_CoDiff+transformer/net_epoch_bestval_at19.pth" # finetune时使用的diffusion模型
    diffusion_weight: 0.5 # finetune时diffusion产生的feature的权重

    diffusion_train_steps: 500
    diffusion_test_steps: 8

    voxel_size: *voxel_size
    lidar_range: *cav_lidar
    anchor_number: *anchor_num
    max_cav: *max_cav
    head_dim: 256
    compression: 32  #加入压缩率 32 ,256->8
    spatial_compression: 8 # 空间压缩率 64->8

    pillar_vfe:
      use_norm: true
      with_distance: false
      use_absolute_xyz: true
      num_filters: [64]
    point_pillar_scatter:
      num_features: 64

    base_bev_backbone: # backbone will downsample 2x
      layer_nums: &layer_nums [3, 5, 8]
      layer_strides: [2, 2, 2]
      num_filters: &num_filters [64, 128, 256]
      upsample_strides: [1, 2, 4]
      num_upsample_filter: [128, 128, 128]

    fusion_method: att
    att:
      feat_dim: [64, 128, 256]

    shrink_header:
      kernal_size: [ 3 ]
      stride: [ 1 ]
      padding: [ 1 ]
      dim: [ 256 ]
      # dim2: [ 512 ]
      input_dim: 384 # 128 * 3

    dir_args: *dir_args
    where2comm_fusion:
      fully: True
      voxel_size: *voxel_size
      downsample_rate: 4
      in_channels: 256
      multi_scale: True
      layer_nums: *layer_nums
      num_filters: *num_filters
      communication:
        round: 1
        threshold: 0.01
        gaussian_smooth:
          k_size: 5
          c_sigma: 1.0

    

loss:
  core_method: point_pillar_loss
  args:
    pos_cls_weight: 2.0
    cls:
      type: 'SigmoidFocalLoss'
      alpha: 0.25
      gamma: 2.0
      weight: 2.0
    reg:
      type: 'WeightedSmoothL1Loss'
      sigma: 3.0
      codewise: true
      weight: 2.0
    dir:
      type: 'WeightedSoftmaxClassificationLoss'
      weight: 0.2
      args: *dir_args
  #when training  RoCo  compression
    # kd:
    #   type: 'KLDivLoss'
    #   weight: 0.1
    #   args:
    #     T: 1.0
    #     alpha: 0.9

optimizer:
  core_method: Adam
  lr: 0.0002
  diff_lr: 0.0002
  args:
    eps: 1e-10
    weight_decay: 1e-4

lr_scheduler:
  core_method: multistep #step, multistep and Exponential support
  gamma: 0.1
  step_size: [10, 15]

